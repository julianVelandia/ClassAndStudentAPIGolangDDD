// Code generated by mockery v2.30.1. DO NOT EDIT.

package view_test

import (
	domain "github.com/julianVelandia/EDteam/DDDyCQRS/internal/class/domain"
	mock "github.com/stretchr/testify/mock"

	query "github.com/julianVelandia/EDteam/DDDyCQRS/internal/class/application/query"
)

// UseCaseMock is an autogenerated mock type for the UseCase type
type UseCaseMock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: qry
func (_m *UseCaseMock) Execute(qry query.View) (domain.Class, error) {
	ret := _m.Called(qry)

	var r0 domain.Class
	var r1 error
	if rf, ok := ret.Get(0).(func(query.View) (domain.Class, error)); ok {
		return rf(qry)
	}
	if rf, ok := ret.Get(0).(func(query.View) domain.Class); ok {
		r0 = rf(qry)
	} else {
		r0 = ret.Get(0).(domain.Class)
	}

	if rf, ok := ret.Get(1).(func(query.View) error); ok {
		r1 = rf(qry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCaseMock creates a new instance of UseCaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCaseMock {
	mock := &UseCaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
