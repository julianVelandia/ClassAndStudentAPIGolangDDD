// Code generated by mockery v2.30.1. DO NOT EDIT.

package view_test

import (
	domain "github.com/julianVelandia/EDteam/DDDyCQRS/internal/student/domain"
	contract "github.com/julianVelandia/EDteam/DDDyCQRS/src/handler/student/view/contract"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	query "github.com/julianVelandia/EDteam/DDDyCQRS/internal/student/application/query"
)

// MapperMock is an autogenerated mock type for the Mapper type
type MapperMock struct {
	mock.Mock
}

// DomainToResponse provides a mock function with given fields: profile, classesDone
func (_m *MapperMock) DomainToResponse(profile domain.Profile, classesDone []domain.Class) contract.Response {
	ret := _m.Called(profile, classesDone)

	var r0 contract.Response
	if rf, ok := ret.Get(0).(func(domain.Profile, []domain.Class) contract.Response); ok {
		r0 = rf(profile, classesDone)
	} else {
		r0 = ret.Get(0).(contract.Response)
	}

	return r0
}

// RequestToQuery provides a mock function with given fields: ctx
func (_m *MapperMock) RequestToQuery(ctx *gin.Context) (query.View, error) {
	ret := _m.Called(ctx)

	var r0 query.View
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (query.View, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) query.View); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(query.View)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMapperMock creates a new instance of MapperMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMapperMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MapperMock {
	mock := &MapperMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
